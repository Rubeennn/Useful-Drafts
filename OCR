import cv2

def preprocess_image(image_path):
    # Read the image
    image = cv2.imread(image_path)

    # Convert to Grayscale
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Contrast Enhancement (Histogram Equalization)
    enhanced_image = cv2.equalizeHist(gray_image)

    # Denoising
    denoised_image = cv2.fastNlMeansDenoising(enhanced_image, None, h=10, templateWindowSize=7, searchWindowSize=21)

    # Sharpening (Optional)
    kernel =  np.array([[-1,-1,-1], [-1,9,-1], [-1,-1,-1]]) # Example kernel for sharpening
    sharpened_image = cv2.filter2D(denoised_image, -1, kernel)

    # Rescaling (Optional, adjust to your desired size)
    new_width, new_height = 800, 600
    rescaled_image = cv2.resize(sharpened_image, (new_width, new_height))

    # Adaptive Thresholding
    _, thresholded_image = cv2.threshold(rescaled_image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

    # Erosion (Optional)
    kernel_erode = np.ones((3, 3), np.uint8)
    eroded_image = cv2.erode(thresholded_image, kernel_erode, iterations=1)

    return eroded_image

# Replace 'your_image_path.jpg' with the path to your image
preprocessed_image = preprocess_image('your_image_path.jpg')

# Now you can use preprocessed_image for text detection with Tesseract
# e.g., pytesseract.image_to_data(preprocessed_image, output_type=pytesseract.Output.DICT)



results = pytesseract.image_to_data(image,lang='eng+hye',  output_type = Output.DATAFRAME, config='--psm 6')

import pytesseract
from pytesseract import Output
import pandas as pd

# Assuming 'image' is your input image

# Use Tesseract to extract text data into a DataFrame
results = pytesseract.image_to_data(image, lang='eng+hye', output_type=Output.DATAFRAME, config='--psm 6')

# Initialize a dictionary to store cell contents
table_data = {}

# Iterate through the rows of the Tesseract output
for index, row in results.iterrows():
    left, top, width, height, text = row['left'], row['top'], row['width'], row['height'], row['text']

    # Identify the cell based on left and top coordinates
    cell_key = (top, left)

    # Add text to the cell in the dictionary
    table_data.setdefault(cell_key, []).append(text)

# Reconstruct the table structure
rows = []
for cell_key, cell_content in table_data.items():
    row, col = cell_key
    rows.append([row, col, ' '.join(cell_content)])

# Convert the list of rows to a DataFrame
reconstructed_df = pd.DataFrame(rows, columns=['Top', 'Left', 'Text'])

# Pivot the DataFrame to get the final tabular structure
table = reconstructed_df.pivot(index='Top', columns='Left', values='Text')

# Display the reconstructed table
print(table)

