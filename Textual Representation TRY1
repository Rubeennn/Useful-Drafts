import re
import numpy as np

def parse_leaf_value(leaf_text):
    return float(re.search(r'leaf=(-?\d+\.\d+)', leaf_text).group(1))

def parse_condition(condition_text):
    match = re.search(r'\[(.*)\]', condition_text)
    return match.group(1)

def extract_conditions_from_text_model(txt_model):
    conditions = []
    lines = txt_model.strip().split('\n')
    for line in lines:
        if ':' in line:
            node_id, rest = line.split(':', 1)
            leaf_text = re.search(r'leaf=', rest)
            if leaf_text:
                conditions.append((int(node_id), parse_leaf_value(rest)))
            else:
                conditions.append((int(node_id), parse_condition(rest)))
    return conditions

def construct_class_text(conditions, class_id):
    class_text = []
    for node_id, condition in conditions:
        if isinstance(condition, float):
            class_text.append(f"class {class_id}: Leaf Value = {condition:.4f}")
        else:
            class_text.append(condition)
    return "\n".join(class_text)

with open('xgb_model.txt', 'r') as f:
    txt_model = f.read()

class_conditions = {
    0: [],
    1: []
}

boosters = txt_model.strip().split('booster[')[1:]

feature_gains = {}  # Store feature gains
for booster in boosters:
    booster_lines = booster.strip().split('\n')
    if len(booster_lines) >= 3:
        conditions = extract_conditions_from_text_model('\n'.join(booster_lines[2:]))
        for node_id, condition in conditions:
            if isinstance(condition, str):
                gain_match = re.search(r'gain=([0-9.]+)', condition)
                if gain_match:
                    gain = float(gain_match.group(1))
                    feature_gains[node_id] = gain

average_gain = np.mean(list(feature_gains.values()))
important_feature_ids = [node_id for node_id, gain in feature_gains.items() if gain > average_gain]

for booster in boosters:
    booster_lines = booster.strip().split('\n')
    if len(booster_lines) >= 3:
        class_id = 0 if 'leaf=0' in booster_lines[2] else 1
        conditions = extract_conditions_from_text_model('\n'.join(booster_lines[2:]))
        filtered_conditions = [(node_id, condition) for node_id, condition in conditions if node_id in important_feature_ids]
        class_conditions[class_id].extend(filtered_conditions)

class_texts = {}
for class_id, conditions in class_conditions.items():
    class_texts[class_id] = construct_class_text(conditions, class_id)

print("Class 0:")
print(class_texts[0])

print("\nClass 1:")
print(class_texts[1])
